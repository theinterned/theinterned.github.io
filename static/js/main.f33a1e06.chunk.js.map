{"version":3,"sources":["style/tokens.js","index.css.js","style/utils.js","App.js","serviceWorker.js","index.js"],"names":["colour","background","border","text","link","linkHover","linkVisited","linkActive","this","font","serif","sans","injectGlobal","_templateObject","linkColours","_ref","arguments","length","undefined","_ref$normal","normal","_ref$hover","hover","_ref$active","active","_ref$visited","visited","_ref$focus","focus","css","utils_templateObject","bpLinks","navBorderColor","Title","styled","h1","App_templateObject","join","Link","a","_templateObject2","Nav","ul","_templateObject3","NavItem","li","_templateObject4","NavLink","_templateObject5","Footer","footer","_templateObject6","App","year","Date","getFullYear","react_default","createElement","Fragment","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f33a1e06.chunk.js","sourcesContent":["export const colour = {\n  background: 'AliceBlue',\n  border: [\n    'MistyRose',\n    'PowderBlue',\n  ],\n  text: 'DarkBlue',\n\n  link: 'Blue',\n  linkHover: 'MediumBlue',\n  linkVisited: 'BlueViolet',\n  get linkActive() { return this.linkVisited },\n}\n\nexport const font = {\n  family: {\n    serif: 'Times, TimesNewRoman, \"Times New Roman\", Baskerville, Georgia, serif',\n    sans:  '\"Avenir Next\", Avenir, Frutiger, \"Frutiger Linotype\", \"Segoe UI\", Futura, \"Century Gothic\", CenturyGothic, \"Helvetica Neue\", Helvetica, sans-serif',\n  }\n}","import { injectGlobal } from 'styled-components';\nimport { colour, font } from './style/tokens.js';\n\ninjectGlobal`\nhtml { font-size: 62.5%; } /* =10px */\nbody {\n  background-color: ${colour.background};\n  font-size: 1.6rem; /* =16px */\n  line-height: 2rem;\n  font-family: ${font.family.sans};\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: ${colour.text};\n  max-width: 84rem;\n  margin: 0 auto;\n  padding: 2rem;\n  @media screen and (min-width:478px) {\n    padding: 4rem 6rem;\n  }\n}\n`","import { css } from 'styled-components';\nimport { colour } from './tokens';\n\nexport const linkColours = ({\n  normal = colour.link,\n  hover = colour.linkHover,\n  active = colour.linkActive,\n  visited = colour.linkVisited,\n  focus = normal,\n} = {}) => css`\n  color: ${normal};\n  &:visited { color: ${visited}; }\n  &:hover { color: ${hover}; }\n  &:focus { color: ${focus}; }\n  &:active { color: ${active}; }\n`;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { colour, font } from './style/tokens';\nimport { linkColours } from './style/utils';\n\nconst bpLinks = 'screen and (min-width:42rem)';\nconst navBorderWidths = '.2rem 0';\nconst navBorderColor = colour.border[1];\n\nconst Title = styled.h1`\n  font-size: 4rem;\n  line-height: 1;\n  margin: -1rem -1rem 3rem;\n  padding: 8rem 2rem 10rem;\n  font-family: ${font.family.serif};\n  text-align: center;\n  font-style: italic;\n  font-weight: normal;\n  border-color: ${[colour.border[0], colour.border[0], colour.border[1], colour.border[1]].join(' ')};\n  border-style: solid;\n  border-width: 1.5rem;\n  background-color: white;\n\n  @media (min-width: 321px), (min-height: 569px) { /* > iphone 5 screen */\n    font-size: 5rem;\n  }\n  @media (min-width: 376px) and (max-height: 415px), (min-height: 628px) { /* > iphone 6 screen */\n    padding: 10rem 2rem 12rem;\n    margin: 0 0 3rem;\n  }\n  @media (min-width: 415px) and (min-height: 737px) { /* > iphone 6+ screen */\n    font-size: 6rem;\n    padding: 18rem 2rem;\n  }\n`;\n\nconst Link = styled.a`\n  ${linkColours()}\n`;\n\nconst Nav = styled.ul`\n  list-style: none;\n  margin: 0 0 6rem;\n  padding: ${navBorderWidths};\n  border-color: ${navBorderColor};\n  border-style: solid;\n  border-width: ${navBorderWidths};\n\n  @media ${bpLinks} {\n    display: flex;\n    border: 0 none;\n    padding: 0;\n  }\n`;\n\nconst NavItem = styled.li`\n  display: block;\n  margin: 0;\n  padding: 0;\n  font-weight: 600;\n  letter-spacing: .15rem;\n  text-align: center;\n  border-color: ${navBorderColor};\n  border-style: solid;\n  border-width: 0;\n\n  &:first-child {\n    border-top-width: 0.1rem;\n  }\n  &:last-child {\n    border-bottom-width: 0.1rem;\n  }\n  \n  @media ${bpLinks} {\n    flex: 1;\n    padding: ${navBorderWidths};\n    background-color: ${colour.background};\n    transition: padding .2s, margin .2s, background-color .3s .1s;\n\n    &, \n    &:first-child, \n    &:last-child {\n      border-width: ${navBorderWidths};\n    }\n\n    &:hover {\n      background-color: ${navBorderColor};\n      padding: .6rem 0;\n      margin: -.4rem 0;\n    }\n    \n  }\n`;\n\nconst NavLink = styled.a`\n  ${linkColours({\n    normal: colour.text,\n    visited: colour.text\n  })}\n\n  &:hover { background-color: white; }\n  \n  text-decoration: none;\n  display: block;\n  background-color: ${colour.background};\n  text-decoration: none;\n  transition: background-color .5s .15s;\n  padding: 1rem 0;\n  border-color: ${navBorderColor};\n  border-style: solid;\n  border-width: 0.1rem 0;\n\n  @media ${bpLinks} {\n    border-width: ${navBorderWidths};\n  }\n`;\n\nconst Footer = styled.footer`\n  text-align: center;\n  opacity: .2;\n  transition: opacity 0.15s;\n  &:hover { opacity: 1; }\n`;\n\nclass App extends Component {\n  render() {\n    const year = new Date().getFullYear();\n    return (\n      <>\n        <Title>Hi, I&rsquo;m Ned<br/>\n          &mdash;<br/>\n          I design & build<br/>\n          web apps.</Title>\n        <Nav>\n          <NavItem><NavLink href=\"https://www.dropbox.com/s/3jxewz8yj4mg9tz/Ned_Schwartz_CV.pdf?dl=0\">CV</NavLink></NavItem>\n          <NavItem><NavLink href=\"https://medium.com/@theinterned\">Medium</NavLink></NavItem>\n          <NavItem><NavLink href=\"https://github.com/theinterned\">Github</NavLink></NavItem>\n          <NavItem><NavLink href=\"https://dribbble.com/theinterned\">Dribbble</NavLink></NavItem>\n          <NavItem><NavLink href=\"https://ca.linkedin.com/in/neddo\">Linkedin</NavLink></NavItem>\n        </Nav>\n        \n        <Footer>\n          <p>&copy; 2001 â€“ {year} Ned Schwartz &bull; <Link href=\"https://raw.githubusercontent.com/theinterned/theinterned.net/master/LICENSE\">MIT license</Link>.</p>\n        </Footer>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css.js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}